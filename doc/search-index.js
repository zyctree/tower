var N=null,E="",T="t",U="u",searchIndex={};
var R=["Service","change","result","try_from","try_into","borrow_mut","borrow","type_id","typeid","Change","ServiceList","ServiceStream","Discover","Mock `Service` that can be used in tests.","tower_test::mock","send_error","tower_test","tower_test::mock::error","tower_test::mock::future","formatter","poll_ready","SendResponse","ResponseFuture","tower_load_shed","to_owned","clone_into","tower_load_shed::error","tower_load_shed::future","LoadShedLayer","LoadShed","Overloaded","Error types","Future types","to_string","into_future","callallunordered","into_inner","Extract the wrapped `Service`.","tower_util","optional","Response","tower_util::layer","tower_util::error::optional","tower_util::future::optional","identity","servicefn","option","future","request","BoxService","UnsyncBoxService","CallAllUnordered","Identity","Optional","MakeService","ServiceFn","tower_filter","tower_filter::error","tower_filter::future","FilterLayer","Predicate","tower_timeout","duration","tower_timeout::error","tower_timeout::future","TimeoutLayer","string","tower_load","tower_load::peak_ewma","tower_load::pending_requests","instrument","ordering","partial_cmp","Yields the next discovery change set.","Constant","InstrumentFuture","PeakEwmaDiscover","PendingRequestsDiscover","Instrument","NoInstrument","PeakEwma","PendingRequests","Handle","overdrawn","tower_retry","tower_retry::budget","tower_retry::future","RetryLayer","Overdrawn","default","clone_request","Future","tower_reconnect","tower_reconnect::future","Reconnect","make_service","tower_spawn_ready","with_executor","Creates a new `SpawnReady` wrapping `service`.","make_connection","tower_spawn_ready::error","tower_spawn_ready::future","SpawnReadyLayer","SpawnReady","MakeFuture","MakeSpawnReady","SpawnError","BackgroundReady","tower_buffer","Creates a new `Buffer` wrapping `service`.","tower_buffer::error","tower_buffer::future","BufferLayer","ServiceError","Error produced when spawning the worker fails","This trait allows you to use either Tokio's threaded…","tower_balance","from_entropy","Initializes a P2C load balancer from the OS's entropy…","tower_balance::error","tower_balance::p2c","tower_balance::pool","BalanceLayer","BalanceMake","PoolDiscoverer","Enforces a limit on the concurrent number of requests the…","Enforces a rate limit on the number of requests the…","ConcurrencyLimitLayer","ConcurrencyLimit","tower_limit","RateLimitLayer","RateLimit","tower_limit::rate","Get a reference to the inner service","Get a mutable reference to the inner service","Consume `self`, returning the inner service","tower_limit::concurrency::future","tower_limit::rate::future","tower::buffer","tower::limit::concurrency","tower::limit","tower::limit::rate","tower::load_shed","tower::retry","tower::timeout","servicebuilder","tower::buffer::error","tower::buffer::future","tower::discover","tower::limit::concurrency::future","tower::limit::rate::future","tower::load_shed::error","tower::load_shed::future","tower::retry::budget","tower::retry::future","tower::timeout::error","tower::timeout::future","tower::builder","tower::layer::util","tower::util","concurrencylimitlayer","bufferlayer","defaultexecutor","concurrencylimit","ratelimitlayer","loadshedlayer","retrylayer","timeoutlayer","MakeConnection","ServiceBuilder","ServiceExt","Buffer requests with a bounded buffer","Adds a buffer in front of an inner service.","An error produced by a `Service` wrapped by a `Buffer`","An error when the buffer's worker closes unexpectedly.","Future eventually completed with the response to the…","WorkerExecutor","Static service discovery based on a predetermined list of…","Dynamic service discovery based on a stream of service…","A change in the service set","servicelist","Provide a uniform set of services able to satisfy a request.","NewService key","Error produced during discovery","Decorates a `Service`, transforming either the request or…","The wrapped service","Wrap the given service with the middleware, returning a…","concurrency","Limit the max number of requests being concurrently…","Future for the `ConcurrencyLimit` service.","Create a new concurrency limit layer.","Create a new concurrency limiter.","Limit the rate at which requests are processed.","A rate of requests per time period.","Future for the `RateLimit` service.","Create new rate limit layer.","Create a new rate.","Create a new rate limiter","A `tower-layer` to wrap services in `LoadShed` middleware.","A `Service` that sheds load when the inner service isn't…","An error returned by `Overload` when the underlying…","Future for the `LoadShed` service.","Creates a new layer.","Wraps a service in `LoadShed` middleware.","Retry requests based on a policy","Configure retrying requests of \"failed\" responses.","A retry \"budget\" for allowing only a certain amount of…","Represents a \"budget\" for retrying requests.","Indicates that it is not currently allowed to \"withdraw\"…","Create a `Budget` that allows for a certain percent of the…","Store a \"deposit\" in the budget, which will be used to…","Check whether there is enough \"balance\" in the budget to…","The `Future` returned by a `Retry` service.","Create a new `RetryLayer` from a retry policy","A \"retry policy\" to classify if a request should be retried.","The `Future` type returned by `Policy::retry()`.","Check the policy if a certain request should be retried.","Tries to clone a request before being passed to the inner…","Responses given by the service.","Errors produced by the service.","The future response value.","Returns `Ready` when the service is able to process…","Process the request and return the response asynchronously.","Applies a timeout to requests via the supplied inner…","Applies a timeout to requests.","The timeout elapsed.","Construct a new elapsed error","`Timeout` response future","Create a timeout from a duration","Creates a new Timeout","A boxed `Service + Send` trait object.","A boxed `Service` trait object.","This is a `futures::Stream` of responses resulting from…","A stream of responses received from the inner service in…","A `Future` consuming a `Service` and request, waiting…","Optionally forwards requests to an inner service.","Future yielding a `Service` once the service is ready to…","Combine two different service types into a single type.","service_fn","Returns a new `ServiceFn` with the given closure.","Create new `CallAll` combinator.","unordered","Return responses as they are ready, regardless of the…","Create new `CallAllUnordered` combinator.","A no-op middleware.","Two middlewares chained together.","Create a new `Identity` value","Create a new `Stack`.","Create a new `OptionService`","Creates new `Service` values.","Responses given by the service","Errors produced by the service","The `Service` value created by this factory","MakeError","Errors produced while building a service.","The future of the `Service` instance.","Create and return a new service value asynchronously."];
searchIndex["tower"]={"doc":"`fn(Request) -> Future<Response>`","i":[[0,"error",R[138],R[31],N,N],[3,R[113],R[146],R[173],N,N],[3,"Closed",E,R[174],N,N],[3,R[106],E,R[114],N,N],[0,R[47],R[138],R[32],N,N],[3,R[22],R[147],R[175],N,N],[3,R[112],R[138],R[171],N,N],[8,R[176],E,R[115],N,N],[3,"Buffer",E,R[172],N,N],[8,R[12],R[148],R[181],N,N],[16,"Key",E,R[182],0,N],[16,R[0],E,E,0,N],[16,"Error",E,R[183],0,N],[10,"poll",E,R[73],0,[[["self"]],[[R[2],["async"]],["async",[R[1]]]]]],[4,R[9],E,R[179],N,N],[13,"Insert",E,E,1,N],[13,"Remove",E,E,1,N],[3,R[10],E,R[177],N,N],[3,R[11],E,R[178],N,N],[0,R[187],R[140],R[188],N,N],[0,R[47],R[139],R[32],N,N],[3,R[22],R[149],R[189],N,N],[3,R[128],R[139],R[125],N,N],[3,R[127],E,R[125],N,N],[0,"rate",R[140],R[192],N,N],[0,R[47],R[141],R[32],N,N],[3,R[22],R[150],R[194],N,N],[3,R[131],R[141],R[126],N,N],[3,R[130],E,R[126],N,N],[3,"Rate",E,R[193],N,N],[0,"error",R[142],R[31],N,N],[3,R[30],R[151],R[200],N,N],[0,R[47],R[142],R[32],N,N],[3,R[22],R[152],R[201],N,N],[3,R[29],R[142],R[199],N,N],[3,R[28],E,R[198],N,N],[0,"budget",R[143],R[206],N,N],[3,"Budget",R[153],R[207],N,N],[3,R[88],E,R[208],N,N],[0,R[47],R[143],R[32],N,N],[3,R[22],R[154],R[212],N,N],[3,"Retry",R[143],R[205],N,N],[8,"Policy",E,R[214],N,N],[16,R[91],E,R[215],2,N],[10,"retry",E,R[216],2,[[["self"],[R[2]],["e"],["req"],["res"]],[R[46]]]],[10,R[90],E,R[217],2,[[["self"],["req"]],[R[46]]]],[3,R[87],E,R[204],N,N],[0,"error",R[144],R[31],N,N],[3,"Elapsed",R[155],R[225],N,N],[0,R[47],R[144],R[32],N,N],[3,R[22],R[156],R[227],N,N],[3,"Timeout",R[144],R[224],N,N],[3,R[65],E,R[223],N,N],[8,R[0],"tower","An asynchronous function from `Request` to a `Response`.",N,N],[16,R[40],E,R[218],3,N],[16,"Error",E,R[219],3,N],[16,R[91],E,R[220],3,N],[10,R[20],E,R[221],3,[[["self"]],[["async"],[R[2],["async"]]]]],[10,"call",E,R[222],3,[[["self"],[R[48]]]]],[5,R[238],E,R[239],N,[[[T]],[R[45]]]],[8,R[168],E,"The MakeConnection trait is used to create transports",N,N],[16,"Connection",E,"The transport provided by this service",4,N],[16,"Error",E,"Errors produced by the connecting service",4,N],[16,R[91],E,"The future that eventually produces the transport",4,N],[10,R[20],E,"Returns `Ready` when it is able to make more connections.",4,[[["self"]],[[R[2],["async"]],["async"]]]],[10,R[99],E,"Connect and return a transport asynchronously",4,[[["self"],["target"]]]],[8,R[54],E,R[249],N,N],[16,R[40],E,R[250],5,N],[16,"Error",E,R[251],5,N],[16,R[0],E,R[252],5,N],[16,R[253],E,R[254],5,N],[16,R[91],E,R[255],5,N],[10,R[20],E,"Returns `Ready` when the factory is able to process create…",5,[[["self"]],[["async"],[R[2],["async"]]]]],[10,R[95],E,R[256],5,[[["self"],["target"]]]],[0,"builder",E,"Builder types to compose layers and services",N,N],[3,R[169],R[157],"Declaratively construct Service values.",N,N],[11,"new",E,"Create a new `ServiceBuilder`.",6,[[],["self"]]],[11,"layer",E,"Add a new layer `T` into the `ServiceBuilder`.",6,[[[T]],[[R[145],["stack"]],["stack"]]]],[11,"buffer",E,"Buffer requests when when the next layer is out of capacity.",6,[[["usize"]],[[R[145],["stack"]],["stack",[R[161]]]]]],[11,"concurrency_limit",E,"Limit the max number of in-flight requests.",6,[[["usize"]],[[R[145],["stack"]],["stack",[R[160]]]]]],[11,"load_shed",E,"Drop requests when the next layer is unable to respond to…",6,[[],[[R[145],["stack"]],["stack",[R[165]]]]]],[11,"rate_limit",E,"Limit requests to at most `num` per the given duration",6,[[[R[62]],["u64"]],[["stack",[R[164]]],[R[145],["stack"]]]]],[11,"retry",E,"Retry failed requests.",6,[[["p"]],[[R[145],["stack"]],["stack",[R[166]]]]]],[11,"timeout",E,"Fail requests that take longer than `timeout`.",6,[[[R[62]]],[["stack",[R[167]]],[R[145],["stack"]]]]],[11,R[36],E,"Obtains the underlying `Layer` implementation.",6,[[],["l"]]],[11,"service",E,"Wrap the service `S` with the layers.",6,[[["s"]]]],[0,"layer","tower","A collection of `Layer` based tower services",N,N],[8,"Layer","tower::layer",R[184],N,N],[16,R[0],E,R[185],7,N],[10,"layer",E,R[186],7,[[["self"],["s"]]]],[0,"util",E,"`util` exports an Identity Layer and Chain, a mechanism…",N,N],[3,R[52],R[158],R[244],N,N],[3,"Stack",E,R[245],N,N],[0,"util","tower","Combinators for working with `Service`s",N,N],[3,R[49],R[159],R[230],N,N],[3,"CallAll",E,R[232],N,N],[3,R[51],E,R[233],N,N],[4,"Either",E,R[237],N,N],[13,"A",E,E,8,N],[13,"B",E,E,8,N],[3,"Oneshot",E,R[234],N,N],[3,R[53],E,R[235],N,N],[3,"Ready",E,R[236],N,N],[3,R[50],E,R[231],N,N],[8,R[170],E,"An extension trait for `Service`s that provides a variety…",N,N],[11,"ready",E,"A future yielding the service when it is ready to accept a…",9,[[],["ready"]]],[11,"oneshot",E,"Consume this `Service`, calling with the providing request…",9,[[[R[48]]],["oneshot"]]],[11,"call_all",E,"Process all requests from the given `Stream`, and produce…",9,[[["s"]],["callall"]]],[11,"from",R[146],E,10,[[[T]],[T]]],[11,R[33],E,E,10,[[["self"]],[R[66]]]],[11,"into",E,E,10,[[],[U]]],[11,R[3],E,E,10,[[[U]],[R[2]]]],[11,R[4],E,E,10,[[],[R[2]]]],[11,R[5],E,E,10,[[["self"]],[T]]],[11,R[6],E,E,10,[[["self"]],[T]]],[11,R[7],E,E,10,[[["self"]],[R[8]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[33],E,E,11,[[["self"]],[R[66]]]],[11,"into",E,E,11,[[],[U]]],[11,R[3],E,E,11,[[[U]],[R[2]]]],[11,R[4],E,E,11,[[],[R[2]]]],[11,R[5],E,E,11,[[["self"]],[T]]],[11,R[6],E,E,11,[[["self"]],[T]]],[11,R[7],E,E,11,[[["self"]],[R[8]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[33],E,E,12,[[["self"]],[R[66]]]],[11,"into",E,E,12,[[],[U]]],[11,R[3],E,E,12,[[[U]],[R[2]]]],[11,R[4],E,E,12,[[],[R[2]]]],[11,R[5],E,E,12,[[["self"]],[T]]],[11,R[6],E,E,12,[[["self"]],[T]]],[11,R[7],E,E,12,[[["self"]],[R[8]]]],[11,"from",R[147],E,13,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,R[3],E,E,13,[[[U]],[R[2]]]],[11,R[4],E,E,13,[[],[R[2]]]],[11,R[5],E,E,13,[[["self"]],[T]]],[11,R[6],E,E,13,[[["self"]],[T]]],[11,R[7],E,E,13,[[["self"]],[R[8]]]],[11,R[34],E,E,13,[[],["f"]]],[11,"from",R[138],E,14,[[[T]],[T]]],[11,"into",E,E,14,[[],[U]]],[11,R[3],E,E,14,[[[U]],[R[2]]]],[11,R[4],E,E,14,[[],[R[2]]]],[11,R[5],E,E,14,[[["self"]],[T]]],[11,R[6],E,E,14,[[["self"]],[T]]],[11,R[7],E,E,14,[[["self"]],[R[8]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[24],E,E,15,[[["self"]],[T]]],[11,R[25],E,E,15,[[["self"],[T]]]],[11,"into",E,E,15,[[],[U]]],[11,R[3],E,E,15,[[[U]],[R[2]]]],[11,R[4],E,E,15,[[],[R[2]]]],[11,R[5],E,E,15,[[["self"]],[T]]],[11,R[6],E,E,15,[[["self"]],[T]]],[11,R[7],E,E,15,[[["self"]],[R[8]]]],[11,R[20],E,E,15,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[99],E,E,15,[[["self"],["target"]]]],[11,R[20],E,E,15,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[95],E,E,15,[[["self"],["target"]]]],[11,"from",R[148],E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[3],E,E,1,[[[U]],[R[2]]]],[11,R[4],E,E,1,[[],[R[2]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[],[U]]],[11,R[3],E,E,16,[[[U]],[R[2]]]],[11,R[4],E,E,16,[[],[R[2]]]],[11,R[5],E,E,16,[[["self"]],[T]]],[11,R[6],E,E,16,[[["self"]],[T]]],[11,R[7],E,E,16,[[["self"]],[R[8]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[],[U]]],[11,R[3],E,E,17,[[[U]],[R[2]]]],[11,R[4],E,E,17,[[],[R[2]]]],[11,R[5],E,E,17,[[["self"]],[T]]],[11,R[6],E,E,17,[[["self"]],[T]]],[11,R[7],E,E,17,[[["self"]],[R[8]]]],[11,"from",R[149],E,18,[[[T]],[T]]],[11,"into",E,E,18,[[],[U]]],[11,R[3],E,E,18,[[[U]],[R[2]]]],[11,R[4],E,E,18,[[],[R[2]]]],[11,R[5],E,E,18,[[["self"]],[T]]],[11,R[6],E,E,18,[[["self"]],[T]]],[11,R[7],E,E,18,[[["self"]],[R[8]]]],[11,R[34],E,E,18,[[],["f"]]],[11,"from",R[139],E,19,[[[T]],[T]]],[11,R[24],E,E,19,[[["self"]],[T]]],[11,R[25],E,E,19,[[["self"],[T]]]],[11,"into",E,E,19,[[],[U]]],[11,R[3],E,E,19,[[[U]],[R[2]]]],[11,R[4],E,E,19,[[],[R[2]]]],[11,R[5],E,E,19,[[["self"]],[T]]],[11,R[6],E,E,19,[[["self"]],[T]]],[11,R[7],E,E,19,[[["self"]],[R[8]]]],[11,R[20],E,E,19,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[99],E,E,19,[[["self"],["target"]]]],[11,R[20],E,E,19,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[95],E,E,19,[[["self"],["target"]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[24],E,E,20,[[["self"]],[T]]],[11,R[25],E,E,20,[[["self"],[T]]]],[11,"into",E,E,20,[[],[U]]],[11,R[3],E,E,20,[[[U]],[R[2]]]],[11,R[4],E,E,20,[[],[R[2]]]],[11,R[5],E,E,20,[[["self"]],[T]]],[11,R[6],E,E,20,[[["self"]],[T]]],[11,R[7],E,E,20,[[["self"]],[R[8]]]],[11,"from",R[150],E,21,[[[T]],[T]]],[11,"into",E,E,21,[[],[U]]],[11,R[3],E,E,21,[[[U]],[R[2]]]],[11,R[4],E,E,21,[[],[R[2]]]],[11,R[5],E,E,21,[[["self"]],[T]]],[11,R[6],E,E,21,[[["self"]],[T]]],[11,R[7],E,E,21,[[["self"]],[R[8]]]],[11,R[34],E,E,21,[[],["f"]]],[11,"from",R[141],E,22,[[[T]],[T]]],[11,"into",E,E,22,[[],[U]]],[11,R[3],E,E,22,[[[U]],[R[2]]]],[11,R[4],E,E,22,[[],[R[2]]]],[11,R[5],E,E,22,[[["self"]],[T]]],[11,R[6],E,E,22,[[["self"]],[T]]],[11,R[7],E,E,22,[[["self"]],[R[8]]]],[11,R[20],E,E,22,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[99],E,E,22,[[["self"],["target"]]]],[11,R[20],E,E,22,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[95],E,E,22,[[["self"],["target"]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,"into",E,E,23,[[],[U]]],[11,R[3],E,E,23,[[[U]],[R[2]]]],[11,R[4],E,E,23,[[],[R[2]]]],[11,R[5],E,E,23,[[["self"]],[T]]],[11,R[6],E,E,23,[[["self"]],[T]]],[11,R[7],E,E,23,[[["self"]],[R[8]]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[24],E,E,24,[[["self"]],[T]]],[11,R[25],E,E,24,[[["self"],[T]]]],[11,"into",E,E,24,[[],[U]]],[11,R[3],E,E,24,[[[U]],[R[2]]]],[11,R[4],E,E,24,[[],[R[2]]]],[11,R[5],E,E,24,[[["self"]],[T]]],[11,R[6],E,E,24,[[["self"]],[T]]],[11,R[7],E,E,24,[[["self"]],[R[8]]]],[11,"from",R[151],E,25,[[[T]],[T]]],[11,R[33],E,E,25,[[["self"]],[R[66]]]],[11,"into",E,E,25,[[],[U]]],[11,R[3],E,E,25,[[[U]],[R[2]]]],[11,R[4],E,E,25,[[],[R[2]]]],[11,R[5],E,E,25,[[["self"]],[T]]],[11,R[6],E,E,25,[[["self"]],[T]]],[11,R[7],E,E,25,[[["self"]],[R[8]]]],[11,"from",R[152],E,26,[[[T]],[T]]],[11,"into",E,E,26,[[],[U]]],[11,R[3],E,E,26,[[[U]],[R[2]]]],[11,R[4],E,E,26,[[],[R[2]]]],[11,R[5],E,E,26,[[["self"]],[T]]],[11,R[6],E,E,26,[[["self"]],[T]]],[11,R[7],E,E,26,[[["self"]],[R[8]]]],[11,R[34],E,E,26,[[],["f"]]],[11,"from",R[142],E,27,[[[T]],[T]]],[11,R[24],E,E,27,[[["self"]],[T]]],[11,R[25],E,E,27,[[["self"],[T]]]],[11,"into",E,E,27,[[],[U]]],[11,R[3],E,E,27,[[[U]],[R[2]]]],[11,R[4],E,E,27,[[],[R[2]]]],[11,R[5],E,E,27,[[["self"]],[T]]],[11,R[6],E,E,27,[[["self"]],[T]]],[11,R[7],E,E,27,[[["self"]],[R[8]]]],[11,R[20],E,E,27,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[99],E,E,27,[[["self"],["target"]]]],[11,R[20],E,E,27,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[95],E,E,27,[[["self"],["target"]]]],[11,"from",E,E,28,[[[T]],[T]]],[11,"into",E,E,28,[[],[U]]],[11,R[3],E,E,28,[[[U]],[R[2]]]],[11,R[4],E,E,28,[[],[R[2]]]],[11,R[5],E,E,28,[[["self"]],[T]]],[11,R[6],E,E,28,[[["self"]],[T]]],[11,R[7],E,E,28,[[["self"]],[R[8]]]],[11,"from",R[153],E,29,[[[T]],[T]]],[11,"into",E,E,29,[[],[U]]],[11,R[3],E,E,29,[[[U]],[R[2]]]],[11,R[4],E,E,29,[[],[R[2]]]],[11,R[5],E,E,29,[[["self"]],[T]]],[11,R[6],E,E,29,[[["self"]],[T]]],[11,R[7],E,E,29,[[["self"]],[R[8]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,"into",E,E,30,[[],[U]]],[11,R[3],E,E,30,[[[U]],[R[2]]]],[11,R[4],E,E,30,[[],[R[2]]]],[11,R[5],E,E,30,[[["self"]],[T]]],[11,R[6],E,E,30,[[["self"]],[T]]],[11,R[7],E,E,30,[[["self"]],[R[8]]]],[11,"from",R[154],E,31,[[[T]],[T]]],[11,"into",E,E,31,[[],[U]]],[11,R[3],E,E,31,[[[U]],[R[2]]]],[11,R[4],E,E,31,[[],[R[2]]]],[11,R[5],E,E,31,[[["self"]],[T]]],[11,R[6],E,E,31,[[["self"]],[T]]],[11,R[7],E,E,31,[[["self"]],[R[8]]]],[11,R[34],E,E,31,[[],["f"]]],[11,"from",R[143],E,32,[[[T]],[T]]],[11,R[24],E,E,32,[[["self"]],[T]]],[11,R[25],E,E,32,[[["self"],[T]]]],[11,"into",E,E,32,[[],[U]]],[11,R[3],E,E,32,[[[U]],[R[2]]]],[11,R[4],E,E,32,[[],[R[2]]]],[11,R[5],E,E,32,[[["self"]],[T]]],[11,R[6],E,E,32,[[["self"]],[T]]],[11,R[7],E,E,32,[[["self"]],[R[8]]]],[11,R[20],E,E,32,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[99],E,E,32,[[["self"],["target"]]]],[11,R[20],E,E,32,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[95],E,E,32,[[["self"],["target"]]]],[11,"from",E,E,33,[[[T]],[T]]],[11,"into",E,E,33,[[],[U]]],[11,R[3],E,E,33,[[[U]],[R[2]]]],[11,R[4],E,E,33,[[],[R[2]]]],[11,R[5],E,E,33,[[["self"]],[T]]],[11,R[6],E,E,33,[[["self"]],[T]]],[11,R[7],E,E,33,[[["self"]],[R[8]]]],[11,"from",R[155],E,34,[[[T]],[T]]],[11,R[33],E,E,34,[[["self"]],[R[66]]]],[11,"into",E,E,34,[[],[U]]],[11,R[3],E,E,34,[[[U]],[R[2]]]],[11,R[4],E,E,34,[[],[R[2]]]],[11,R[5],E,E,34,[[["self"]],[T]]],[11,R[6],E,E,34,[[["self"]],[T]]],[11,R[7],E,E,34,[[["self"]],[R[8]]]],[11,"from",R[156],E,35,[[[T]],[T]]],[11,"into",E,E,35,[[],[U]]],[11,R[3],E,E,35,[[[U]],[R[2]]]],[11,R[4],E,E,35,[[],[R[2]]]],[11,R[5],E,E,35,[[["self"]],[T]]],[11,R[6],E,E,35,[[["self"]],[T]]],[11,R[7],E,E,35,[[["self"]],[R[8]]]],[11,R[34],E,E,35,[[],["f"]]],[11,"from",R[144],E,36,[[[T]],[T]]],[11,R[24],E,E,36,[[["self"]],[T]]],[11,R[25],E,E,36,[[["self"],[T]]]],[11,"into",E,E,36,[[],[U]]],[11,R[3],E,E,36,[[[U]],[R[2]]]],[11,R[4],E,E,36,[[],[R[2]]]],[11,R[5],E,E,36,[[["self"]],[T]]],[11,R[6],E,E,36,[[["self"]],[T]]],[11,R[7],E,E,36,[[["self"]],[R[8]]]],[11,R[20],E,E,36,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[99],E,E,36,[[["self"],["target"]]]],[11,R[20],E,E,36,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[95],E,E,36,[[["self"],["target"]]]],[11,"from",E,E,37,[[[T]],[T]]],[11,"into",E,E,37,[[],[U]]],[11,R[3],E,E,37,[[[U]],[R[2]]]],[11,R[4],E,E,37,[[],[R[2]]]],[11,R[5],E,E,37,[[["self"]],[T]]],[11,R[6],E,E,37,[[["self"]],[T]]],[11,R[7],E,E,37,[[["self"]],[R[8]]]],[11,"from",R[157],E,6,[[[T]],[T]]],[11,R[24],E,E,6,[[["self"]],[T]]],[11,R[25],E,E,6,[[["self"],[T]]]],[11,"into",E,E,6,[[],[U]]],[11,R[3],E,E,6,[[[U]],[R[2]]]],[11,R[4],E,E,6,[[],[R[2]]]],[11,R[5],E,E,6,[[["self"]],[T]]],[11,R[6],E,E,6,[[["self"]],[T]]],[11,R[7],E,E,6,[[["self"]],[R[8]]]],[11,"from",R[158],E,38,[[[T]],[T]]],[11,R[24],E,E,38,[[["self"]],[T]]],[11,R[25],E,E,38,[[["self"],[T]]]],[11,"into",E,E,38,[[],[U]]],[11,R[3],E,E,38,[[[U]],[R[2]]]],[11,R[4],E,E,38,[[],[R[2]]]],[11,R[5],E,E,38,[[["self"]],[T]]],[11,R[6],E,E,38,[[["self"]],[T]]],[11,R[7],E,E,38,[[["self"]],[R[8]]]],[11,"from",E,E,39,[[[T]],[T]]],[11,R[24],E,E,39,[[["self"]],[T]]],[11,R[25],E,E,39,[[["self"],[T]]]],[11,"into",E,E,39,[[],[U]]],[11,R[3],E,E,39,[[[U]],[R[2]]]],[11,R[4],E,E,39,[[],[R[2]]]],[11,R[5],E,E,39,[[["self"]],[T]]],[11,R[6],E,E,39,[[["self"]],[T]]],[11,R[7],E,E,39,[[["self"]],[R[8]]]],[11,"from",R[159],E,40,[[[T]],[T]]],[11,"into",E,E,40,[[],[U]]],[11,R[3],E,E,40,[[[U]],[R[2]]]],[11,R[4],E,E,40,[[],[R[2]]]],[11,R[5],E,E,40,[[["self"]],[T]]],[11,R[6],E,E,40,[[["self"]],[T]]],[11,R[7],E,E,40,[[["self"]],[R[8]]]],[11,R[20],E,E,40,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[99],E,E,40,[[["self"],["target"]]]],[11,R[20],E,E,40,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[95],E,E,40,[[["self"],["target"]]]],[11,"from",E,E,41,[[[T]],[T]]],[11,"into",E,E,41,[[],[U]]],[11,R[3],E,E,41,[[[U]],[R[2]]]],[11,R[4],E,E,41,[[],[R[2]]]],[11,R[5],E,E,41,[[["self"]],[T]]],[11,R[6],E,E,41,[[["self"]],[T]]],[11,R[7],E,E,41,[[["self"]],[R[8]]]],[11,"from",E,E,42,[[[T]],[T]]],[11,"into",E,E,42,[[],[U]]],[11,R[3],E,E,42,[[[U]],[R[2]]]],[11,R[4],E,E,42,[[],[R[2]]]],[11,R[5],E,E,42,[[["self"]],[T]]],[11,R[6],E,E,42,[[["self"]],[T]]],[11,R[7],E,E,42,[[["self"]],[R[8]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[24],E,E,8,[[["self"]],[T]]],[11,R[25],E,E,8,[[["self"],[T]]]],[11,"into",E,E,8,[[],[U]]],[11,R[3],E,E,8,[[[U]],[R[2]]]],[11,R[4],E,E,8,[[],[R[2]]]],[11,R[5],E,E,8,[[["self"]],[T]]],[11,R[6],E,E,8,[[["self"]],[T]]],[11,R[7],E,E,8,[[["self"]],[R[8]]]],[11,R[34],E,E,8,[[],["f"]]],[11,R[20],E,E,8,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[99],E,E,8,[[["self"],["target"]]]],[11,R[20],E,E,8,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[95],E,E,8,[[["self"],["target"]]]],[11,"from",E,E,43,[[[T]],[T]]],[11,"into",E,E,43,[[],[U]]],[11,R[3],E,E,43,[[[U]],[R[2]]]],[11,R[4],E,E,43,[[],[R[2]]]],[11,R[5],E,E,43,[[["self"]],[T]]],[11,R[6],E,E,43,[[["self"]],[T]]],[11,R[7],E,E,43,[[["self"]],[R[8]]]],[11,R[34],E,E,43,[[],["f"]]],[11,"from",E,E,44,[[[T]],[T]]],[11,"into",E,E,44,[[],[U]]],[11,R[3],E,E,44,[[[U]],[R[2]]]],[11,R[4],E,E,44,[[],[R[2]]]],[11,R[5],E,E,44,[[["self"]],[T]]],[11,R[6],E,E,44,[[["self"]],[T]]],[11,R[7],E,E,44,[[["self"]],[R[8]]]],[11,R[20],E,E,44,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[99],E,E,44,[[["self"],["target"]]]],[11,R[20],E,E,44,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[95],E,E,44,[[["self"],["target"]]]],[11,"from",E,E,45,[[[T]],[T]]],[11,"into",E,E,45,[[],[U]]],[11,R[3],E,E,45,[[[U]],[R[2]]]],[11,R[4],E,E,45,[[],[R[2]]]],[11,R[5],E,E,45,[[["self"]],[T]]],[11,R[6],E,E,45,[[["self"]],[T]]],[11,R[7],E,E,45,[[["self"]],[R[8]]]],[11,R[34],E,E,45,[[],["f"]]],[11,"from",E,E,46,[[[T]],[T]]],[11,"into",E,E,46,[[],[U]]],[11,R[3],E,E,46,[[[U]],[R[2]]]],[11,R[4],E,E,46,[[],[R[2]]]],[11,R[5],E,E,46,[[["self"]],[T]]],[11,R[6],E,E,46,[[["self"]],[T]]],[11,R[7],E,E,46,[[["self"]],[R[8]]]],[11,R[20],E,E,46,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[99],E,E,46,[[["self"],["target"]]]],[11,R[20],E,E,46,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[95],E,E,46,[[["self"],["target"]]]],[11,"clone",R[138],E,15,[[["self"]],["buffer"]]],[11,"source",R[146],E,10,[[["self"]],[["error"],[R[46],["error"]]]]],[11,R[20],R[138],E,15,[[["self"]],[["async"],[R[2],["async"]]]]],[11,"call",E,E,15,[[["self"],[R[48]]]]],[11,"fmt",E,E,14,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[146],E,11,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",E,E,10,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",E,E,12,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",E,E,12,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",E,E,11,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",E,E,10,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"poll",R[147],E,13,[[["self"]],[["async"],[R[2],["async"]]]]],[11,"layer",R[138],E,14,[[["self"],["s"]]]],[11,"poll",R[148],E,17,[[["self"]],[[R[2],["async"]],["async",[R[1]]]]]],[11,"poll",E,E,16,[[["self"]],[[R[2],["async"]],["async",[R[1]]]]]],[11,"clone",R[141],E,24,[[["self"]],["rate"]]],[11,"clone",R[139],E,19,[[["self"]],[R[163]]]],[11,"clone",E,E,20,[[["self"]],[R[160]]]],[11,"drop",R[149],E,18,[[["self"]]]],[11,R[20],R[141],E,22,[[["self"]],[[R[2],["async"]],["async"]]]],[11,"call",E,E,22,[[["self"],[R[48]]]]],[11,R[20],R[139],E,19,[[["self"]],[["async"],[R[2],["async"]]]]],[11,"call",E,E,19,[[["self"],[R[48]]]]],[11,"layer",E,E,20,[[["self"],["s"]]]],[11,"layer",R[141],E,23,[[["self"],["s"]]]],[11,"fmt",R[139],E,19,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[141],E,22,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",E,E,24,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[139],E,20,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[150],E,21,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[141],E,23,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[149],E,18,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"poll",E,E,18,[[["self"]],[[R[2],["async"]],["async"]]]],[11,"poll",R[150],E,21,[[["self"]],[[R[2],["async"]],["async"]]]],[11,"clone",R[142],E,27,[[["self"]],["loadshed"]]],[11,"fmt",R[151],E,25,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[142],E,27,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",E,E,28,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[152],E,26,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[151],E,25,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,R[20],R[142],E,27,[[["self"]],[["async"],[R[2],["async"]]]]],[11,"call",E,E,27,[[["self"],["req"]]]],[11,"layer",E,E,28,[[["self"],["s"]]]],[11,"poll",R[152],E,26,[[["self"]],[["async"],[R[2],["async"]]]]],[11,"clone",R[143],E,32,[[["self"]],["retry"]]],[11,"fmt",R[153],E,30,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[154],E,31,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[143],E,33,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[153],E,29,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[143],E,32,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,R[20],E,E,32,[[["self"]],[[R[2],["async"]],["async"]]]],[11,"call",E,E,32,[[["self"],[R[48]]]]],[11,"layer",E,E,33,[[["self"],["s"]]]],[11,"poll",R[154],E,31,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[89],R[153],E,29,[[],["budget"]]],[11,"clone",R[144],E,36,[[["self"]],["timeout"]]],[11,"fmt",R[155],E,34,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[144],E,36,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",E,E,37,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[155],E,34,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[156],E,35,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,R[20],R[144],E,36,[[["self"]],[[R[2],["async"]],["async"]]]],[11,"call",E,E,36,[[["self"],[R[48]]]]],[11,"poll",R[156],E,35,[[["self"]],[[R[2],["async"]],["async"]]]],[11,"layer",R[144],E,37,[[["self"],["s"]]]],[11,"clone",R[158],E,39,[[["self"]],["stack"]]],[11,"clone",R[159],E,8,[[["self"]],["either"]]],[11,"clone",R[158],E,38,[[["self"]],[R[44]]]],[11,"poll",R[159],E,41,[[["self"]],[[R[2],["async"]],["async",[R[46]]]]]],[11,"poll",E,E,42,[[["self"]],[[R[2],["async"]],["async",[R[46]]]]]],[11,"layer",R[158],E,38,[[["self"],["s"]]]],[11,"layer",E,E,39,[[["self"],["s"]]]],[11,"fmt",R[159],E,45,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",E,E,42,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",E,E,41,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",E,E,8,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[158],E,38,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[159],E,40,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",E,E,46,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,"fmt",R[158],E,39,[[["self"],[R[19]]],[[R[2],["error"]],["error"]]]],[11,R[20],R[159],E,44,[[["self"]],[["async"],[R[2],["async"]]]]],[11,"call",E,E,44,[[["self"],[R[48]]]]],[11,R[20],E,E,8,[[["self"]],[[R[2],["async"]],["async"]]]],[11,"call",E,E,8,[[["self"],[R[48]]]]],[11,R[20],E,E,46,[[["self"]],[[R[2],["async"]],["async"]]]],[11,"call",E,E,46,[[["self"],[T]],[["box",[R[47]]],[R[47]]]]],[11,R[20],E,E,40,[[["self"]],[[R[2],["async"]],["async"]]]],[11,"call",E,E,40,[[["self"],[T]],[["box",[R[47]]],[R[47]]]]],[11,"poll",E,E,43,[[["self"]],[["async"],[R[2],["async"]]]]],[11,"poll",E,E,45,[[["self"]],[[R[2],["async"]],["async"]]]],[11,"poll",E,E,8,[[["self"]],[["async"],[R[2],["async"]]]]],[11,R[89],R[158],E,38,[[],[R[44]]]],[11,"clone",R[157],E,6,[[["self"]],[R[145]]]],[11,"fmt",E,E,6,[[["self"],[R[19]]],[R[2]]]],[11,"new",R[138],E,14,[[["usize"]],[[R[161],[R[162]]],[R[162]]]]],[11,R[97],E,E,14,[[["usize"],["e"]],[R[161]]]],[11,"new",E,R[109],15,[[[T],["usize"]],["buffer"]]],[11,R[97],E,R[109],15,[[["e"],[T],["usize"]],["buffer"]]],[11,"new",R[148],E,16,[[[T]],[R[180]]]],[11,"new",E,E,17,[[["s"]],["servicestream"]]],[11,"new",R[139],R[191],19,[[[T],["usize"]],[R[163]]]],[11,"get_ref",E,R[133],19,[[["self"]],[T]]],[11,"get_mut",E,R[134],19,[[["self"]],[T]]],[11,R[36],E,R[135],19,[[],[T]]],[11,"new",E,R[190],20,[[["usize"]],[R[160]]]],[11,"new",R[141],R[197],22,[[[T],["rate"]],["ratelimit"]]],[11,"get_ref",E,R[133],22,[[["self"]],[T]]],[11,"get_mut",E,R[134],22,[[["self"]],[T]]],[11,R[36],E,R[135],22,[[],[T]]],[11,"new",E,R[195],23,[[[R[62]],["u64"]],[R[164]]]],[11,"new",E,R[196],24,[[[R[62]],["u64"]],["rate"]]],[11,"new",R[142],R[203],27,[[["s"]],["loadshed"]]],[11,"new",E,R[202],28,[[],[R[165]]]],[11,"new",R[153],R[209],29,[[["f32"],[R[62]],["u32"]],["budget"]]],[11,"deposit",E,R[210],29,[[["self"]]]],[11,"withdraw",E,R[211],29,[[["self"]],[[R[2],[R[83]]],[R[83]]]]],[11,"new",R[143],"Retry the inner service depending on this…",32,[[["s"],["p"]],["retry"]]],[11,"new",E,R[213],33,[[["p"]],[R[166]]]],[11,"new",R[155],R[226],34,[[],["elapsed"]]],[11,"new",R[144],R[229],36,[[[R[62]],[T]],["timeout"]]],[11,"new",E,R[228],37,[[[R[62]]],[R[167]]]],[11,"new",R[158],R[246],38,[[],[R[44]]]],[11,"new",E,R[247],39,[[["inner"],["outer"]],["stack"]]],[11,"new",R[159],E,40,[[["s"]],["boxservice"]]],[11,"new",E,R[240],41,[[["s"],["svc"]],["callall"]]],[11,R[36],E,R[37],41,[[],["svc"]]],[11,R[241],E,R[242],41,[[],[R[35]]]],[11,"new",E,R[243],42,[[["s"],["svc"]],[R[35]]]],[11,R[36],E,R[37],42,[[],["svc"]]],[11,"new",E,E,43,[[["s"],["req"]],["oneshot"]]],[11,"new",E,R[248],44,[[[R[46]]],[R[39]]]],[11,"new",E,E,45,[[[T]],["ready"]]],[11,"new",E,E,46,[[["s"]],["unsyncboxservice"]]]],"p":[[8,R[12]],[4,R[9]],[8,"Policy"],[8,R[0]],[8,R[168]],[8,R[54]],[3,R[169]],[8,"Layer"],[4,"Either"],[8,R[170]],[3,R[113]],[3,"Closed"],[3,R[106]],[3,R[22]],[3,R[112]],[3,"Buffer"],[3,R[10]],[3,R[11]],[3,R[22]],[3,R[128]],[3,R[127]],[3,R[22]],[3,R[131]],[3,R[130]],[3,"Rate"],[3,R[30]],[3,R[22]],[3,R[29]],[3,R[28]],[3,"Budget"],[3,R[88]],[3,R[22]],[3,"Retry"],[3,R[87]],[3,"Elapsed"],[3,R[22]],[3,"Timeout"],[3,R[65]],[3,R[52]],[3,"Stack"],[3,R[49]],[3,"CallAll"],[3,R[51]],[3,"Oneshot"],[3,R[53]],[3,"Ready"],[3,R[50]]]};
searchIndex["tower_balance"]={"doc":"Load balancing middlewares.","i":[[0,"error",R[116],R[31],N,N],[3,R[12],R[119],"An error returned when the balancer's endpoint discovery…",N,N],[0,"p2c",R[116],"A Power-of-Two-Choices Load Balancer",N,N],[3,R[122],R[120],"Efficiently distributes requests across an arbitrary…",N,N],[3,R[123],E,"Makes `Balancer`s given an inner service that makes…",N,N],[3,R[104],E,"Makes a balancer instance.",N,N],[3,"Balance",E,"Distributes requests across inner services using the…",N,N],[11,"new",E,"Builds a balancer using the system entropy.",0,[[],["self"]]],[11,"from_rng",E,"Builds a balancer from the provided RNG.",0,[[["r"]],[[R[2],["error"]],["error"]]]],[11,R[117],E,R[118],1,[[["s"]],["self"]]],[11,"new",E,"Initializes a P2C load balancer from the provided…",2,[[["d"],["smallrng"]],["self"]]],[11,R[117],E,R[118],2,[[["d"]],["self"]]],[11,"len",E,"Returns the number of endpoints currently tracked by the…",2,[[["self"]],["usize"]]],[0,"pool",R[116],"This module defines a load-balanced pool of services that…",N,N],[3,R[124],R[121],"A wrapper around `MakeService` that discovers a new…",N,N],[3,"Builder",E,"A [builder] that lets you configure how a [`Pool`]…",N,N],[3,"Pool",E,"A dynamically sized, load-balanced pool of `Service`…",N,N],[11,"new",E,"Create a new builder with default values for all load…",3,[[],["self"]]],[11,"underutilized_below",E,"When the estimated load (see the module-level docs) drops…",3,[[["self"],["f64"]],["self"]]],[11,"loaded_above",E,"When the estimated load (see the module-level docs)…",3,[[["self"],["f64"]],["self"]]],[11,"initial",E,"The initial estimated load average.",3,[[["self"],["f64"]],["self"]]],[11,"urgency",E,"How aggressively the estimated load average is updated.",3,[[["self"],["f64"]],["self"]]],[11,"max_services",E,"The maximum number of backing `Service` instances to…",3,[[["self"],[R[46],["usize"]],["usize"]],["self"]]],[11,"build",E,"See [`Pool::new`].",3,[[["self"],["ms"],["target"]],["pool"]]],[11,"new",E,"Construct a new dynamically sized `Pool`.",4,[[["ms"],["target"]],["self"]]],[11,"from",R[119],E,5,[[[T]],[T]]],[11,R[33],E,E,5,[[["self"]],[R[66]]]],[11,"into",E,E,5,[[],[U]]],[11,R[3],E,E,5,[[[U]],[R[2]]]],[11,R[4],E,E,5,[[],[R[2]]]],[11,R[5],E,E,5,[[["self"]],[T]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,"from",R[120],E,0,[[[T]],[T]]],[11,R[24],E,E,0,[[["self"]],[T]]],[11,R[25],E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,R[3],E,E,0,[[[U]],[R[2]]]],[11,R[4],E,E,0,[[],[R[2]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[24],E,E,1,[[["self"]],[T]]],[11,R[25],E,E,1,[[["self"],[T]]]],[11,"into",E,E,1,[[],[U]]],[11,R[3],E,E,1,[[[U]],[R[2]]]],[11,R[4],E,E,1,[[],[R[2]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[20],E,E,1,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[95],E,E,1,[[["self"],["target"]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[3],E,E,6,[[[U]],[R[2]]]],[11,R[4],E,E,6,[[],[R[2]]]],[11,R[5],E,E,6,[[["self"]],[T]]],[11,R[6],E,E,6,[[["self"]],[T]]],[11,R[7],E,E,6,[[["self"]],[R[8]]]],[11,R[34],E,E,6,[[],["f"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[3],E,E,2,[[[U]],[R[2]]]],[11,R[4],E,E,2,[[],[R[2]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[20],E,E,2,[[["self"]],[["async"],[R[2],["async"]]]]],[11,R[99],E,E,2,[[["self"],["target"]]]],[11,R[20],E,E,2,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[95],E,E,2,[[["self"],["target"]]]],[11,"from",R[121],E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[3],E,E,7,[[[U]],[R[2]]]],[11,R[4],E,E,7,[[],[R[2]]]],[11,R[5],E,E,7,[[["self"]],[T]]],[11,R[6],E,E,7,[[["self"]],[T]]],[11,R[7],E,E,7,[[["self"]],[R[8]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[24],E,E,3,[[["self"]],[T]]],[11,R[25],E,E,3,[[["self"],[T]]]],[11,"into",E,E,3,[[],[U]]],[11,R[3],E,E,3,[[[U]],[R[2]]]],[11,R[4],E,E,3,[[],[R[2]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[3],E,E,4,[[[U]],[R[2]]]],[11,R[4],E,E,4,[[],[R[2]]]],[11,R[5],E,E,4,[[["self"]],[T]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[20],E,E,4,[[["self"]],[["async"],[R[2],["async"]]]]],[11,R[99],E,E,4,[[["self"],["target"]]]],[11,R[20],E,E,4,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[95],E,E,4,[[["self"],["target"]]]],[11,R[89],E,E,3,[[],["self"]]],[11,"clone",R[120],E,0,[[["self"]],["balancelayer"]]],[11,"clone",E,E,1,[[["self"]],["balancemake"]]],[11,"clone",R[121],E,3,[[["self"]],["builder"]]],[11,"fmt",R[119],E,5,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,5,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[120],E,0,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[121],E,3,[[["self"],[R[19]]],[R[2]]]],[11,"source",R[119],E,5,[[["self"]],[[R[46],["error"]],["error"]]]],[11,"layer",R[120],E,0,[[["self"],["s"]]]],[11,"poll",E,E,6,[[["self"]],["poll"]]],[11,R[20],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,[[["self"],["target"]]]],[11,R[20],E,"Prepares the balancer to process a request.",2,[[["self"]],["poll"]]],[11,"call",E,E,2,[[["self"],["req"]]]],[11,R[20],R[121],E,4,[[["self"]],["poll"]]],[11,"call",E,E,4,[[["self"],["req"]]]],[11,"poll",E,E,7,[[["self"]],[["poll",[R[1]]],[R[1]]]]]],"p":[[3,R[122]],[3,R[123]],[3,"Balance"],[3,"Builder"],[3,"Pool"],[3,R[12]],[3,R[104]],[3,R[124]]]};
searchIndex["tower_buffer"]={"doc":"Buffer requests when the inner service is out of capacity.","i":[[3,R[112],R[108],R[171],N,N],[3,"Buffer",E,R[172],N,N],[0,"error",E,R[31],N,N],[3,R[113],R[110],R[173],N,N],[3,"Closed",E,R[174],N,N],[3,R[106],E,R[114],N,N],[0,R[47],R[108],R[32],N,N],[3,R[22],R[111],R[175],N,N],[11,"new",R[108],E,0,[[["usize"]],["self"]]],[11,R[97],E,E,0,[[["usize"],["e"]],["self"]]],[11,"new",E,R[109],1,[[[T],["usize"]],["self"]]],[11,R[97],E,R[109],1,[[["e"],[T],["usize"]],["self"]]],[8,R[176],E,R[115],N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[3],E,E,0,[[[U]],[R[2]]]],[11,R[4],E,E,0,[[],[R[2]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[24],E,E,1,[[["self"]],[T]]],[11,R[25],E,E,1,[[["self"],[T]]]],[11,"into",E,E,1,[[],[U]]],[11,R[3],E,E,1,[[[U]],[R[2]]]],[11,R[4],E,E,1,[[],[R[2]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"from",R[110],E,2,[[[T]],[T]]],[11,R[33],E,E,2,[[["self"]],[R[66]]]],[11,"into",E,E,2,[[],[U]]],[11,R[3],E,E,2,[[[U]],[R[2]]]],[11,R[4],E,E,2,[[],[R[2]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[33],E,E,3,[[["self"]],[R[66]]]],[11,"into",E,E,3,[[],[U]]],[11,R[3],E,E,3,[[[U]],[R[2]]]],[11,R[4],E,E,3,[[],[R[2]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[33],E,E,4,[[["self"]],[R[66]]]],[11,"into",E,E,4,[[],[U]]],[11,R[3],E,E,4,[[[U]],[R[2]]]],[11,R[4],E,E,4,[[],[R[2]]]],[11,R[5],E,E,4,[[["self"]],[T]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,"from",R[111],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[3],E,E,5,[[[U]],[R[2]]]],[11,R[4],E,E,5,[[],[R[2]]]],[11,R[5],E,E,5,[[["self"]],[T]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,R[34],E,E,5,[[],["f"]]],[11,"clone",R[108],E,1,[[["self"]],["self"]]],[11,"fmt",R[110],E,2,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,4,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,4,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[108],E,0,[[["self"],[R[19]]],[R[2]]]],[11,"source",R[110],E,2,[[["self"]],[[R[46],["error"]],["error"]]]],[11,"poll",R[111],E,5,[[["self"]],["poll"]]],[11,"layer",R[108],E,0,[[["self"],["s"]]]],[11,R[20],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,[[["self"],[R[48]]]]]],"p":[[3,R[112]],[3,"Buffer"],[3,R[113]],[3,"Closed"],[3,R[106]],[3,R[22]]]};
searchIndex["tower_discover"]={"doc":"Tower service discovery","i":[[3,R[10],"tower_discover",R[177],N,N],[3,R[11],E,R[178],N,N],[4,R[9],E,R[179],N,N],[13,"Insert",E,E,0,N],[13,"Remove",E,E,0,N],[11,"new",E,E,1,[[[T]],[R[180]]]],[11,"new",E,E,2,[[["s"]],["self"]]],[8,R[12],E,R[181],N,N],[16,"Key",E,R[182],3,N],[16,R[0],E,E,3,N],[16,"Error",E,R[183],3,N],[10,"poll",E,R[73],3,[[["self"]],[["poll",[R[1]]],[R[1]]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[3],E,E,1,[[[U]],[R[2]]]],[11,R[4],E,E,1,[[],[R[2]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[3],E,E,2,[[[U]],[R[2]]]],[11,R[4],E,E,2,[[],[R[2]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[3],E,E,0,[[[U]],[R[2]]]],[11,R[4],E,E,0,[[],[R[2]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"poll",E,E,1,[[["self"]],[["poll",[R[1]]],[R[1]]]]],[11,"poll",E,E,2,[[["self"]],[["poll",[R[1]]],[R[1]]]]]],"p":[[4,R[9]],[3,R[10]],[3,R[11]],[8,R[12]]]};
searchIndex["tower_filter"]={"doc":"Conditionally dispatch requests to the inner service based…","i":[[3,R[59],R[56],E,N,N],[3,"Filter",E,E,N,N],[0,"error",E,R[31],N,N],[3,"Error",R[57],"Error produced by `Filter`",N,N],[11,"rejected",E,"Create a new `Error` representing a rejected request.",0,[[],["error"]]],[11,"inner",E,"Create a new `Error` representing an inner service error.",0,[[["e"]],["error"]]],[0,R[47],R[56],R[32],N,N],[3,R[22],R[58],"Filtered response future",N,N],[11,"new",R[56],E,1,[[[U]],["self"]]],[8,R[60],E,"Checks a request",N,N],[16,R[91],E,E,2,N],[10,"check",E,E,2,[[["self"],[R[48]]]]],[11,"new",E,E,3,[[[U],[T]],["self"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[3],E,E,1,[[[U]],[R[2]]]],[11,R[4],E,E,1,[[],[R[2]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[24],E,E,3,[[["self"]],[T]]],[11,R[25],E,E,3,[[["self"],[T]]]],[11,"into",E,E,3,[[],[U]]],[11,R[3],E,E,3,[[[U]],[R[2]]]],[11,R[4],E,E,3,[[],[R[2]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,"from",R[57],E,0,[[[T]],[T]]],[11,R[33],E,E,0,[[["self"]],[R[66]]]],[11,"into",E,E,0,[[],[U]]],[11,R[3],E,E,0,[[[U]],[R[2]]]],[11,R[4],E,E,0,[[],[R[2]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"from",R[58],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[3],E,E,4,[[[U]],[R[2]]]],[11,R[4],E,E,4,[[],[R[2]]]],[11,R[5],E,E,4,[[["self"]],[T]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[34],E,E,4,[[],["f"]]],[11,"clone",R[56],E,3,[[["self"]],["filter"]]],[11,"fmt",R[57],E,0,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[58],E,4,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[56],E,3,[[["self"],[R[19]]],[R[2]]]],[11,"source",R[57],E,0,[[["self"]],[["error"],[R[46],["error"]]]]],[11,"poll",R[58],E,4,[[["self"]],["poll"]]],[11,R[20],R[56],E,3,[[["self"]],["poll"]]],[11,"call",E,E,3,[[["self"],[R[48]]]]],[11,"layer",E,E,1,[[["self"],["s"]]]]],"p":[[3,"Error"],[3,R[59]],[8,R[60]],[3,"Filter"],[3,R[22]]]};
searchIndex["tower_hedge"]={"doc":"Pre-emptively retry requests which have been outstanding…","i":[[3,"Hedge","tower_hedge","A middleware that pre-emptively retries requests which…",N,N],[3,R[91],E,"The Future returned by the hedge Service.",N,N],[8,"Policy",E,"A policy which describes which requests can be cloned and…",N,N],[10,R[90],E,"clone_request is called when the request is first received…",0,[[["self"],[R[48]]],[R[46]]]],[10,"can_retry",E,"can_retry is called after the hedge timeout to determine…",0,[[["self"],[R[48]]],["bool"]]],[11,"new",E,"Create a new hedge middleware.",1,[[["f32"],[R[62]],["p"],["s"],["u64"]],["hedge"]]],[11,"new_with_mock_latencies",E,"A hedge middleware with a prepopulated latency histogram.…",1,[[["f32"],[R[62]],["p"],["s"],["u64"]],["hedge"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[3],E,E,1,[[[U]],[R[2]]]],[11,R[4],E,E,1,[[],[R[2]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[3],E,E,2,[[[U]],[R[2]]]],[11,R[4],E,E,2,[[],[R[2]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[34],E,E,2,[[],["f"]]],[11,"fmt",E,E,1,[[["self"],[R[19]]],[R[2]]]],[11,"poll",E,E,2,[[["self"]],["poll"]]],[11,R[20],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,[[["self"],[R[48]]]]]],"p":[[8,"Policy"],[3,"Hedge"],[3,R[91]]]};
searchIndex["tower_layer"]={"doc":"Layer traits and extensions.","i":[[8,"Layer","tower_layer",R[184],N,N],[16,R[0],E,R[185],0,N],[10,"layer",E,R[186],0,[[["self"],["s"]]]]],"p":[[8,"Layer"]]};
searchIndex["tower_limit"]={"doc":"Tower middleware for limiting requests.","i":[[3,R[128],R[129],R[125],N,N],[3,R[127],E,R[125],N,N],[3,R[131],E,R[126],N,N],[3,R[130],E,R[126],N,N],[0,R[187],E,R[188],N,N],[3,R[127],"tower_limit::concurrency",R[125],N,N],[3,R[128],E,R[125],N,N],[0,R[47],E,R[32],N,N],[3,R[22],R[136],R[189],N,N],[11,"new",R[129],R[190],0,[[["usize"]],["self"]]],[11,"new",E,R[191],1,[[[T],["usize"]],["self"]]],[11,"get_ref",E,R[133],1,[[["self"]],[T]]],[11,"get_mut",E,R[134],1,[[["self"]],[T]]],[11,R[36],E,R[135],1,[[],[T]]],[0,"rate",E,R[192],N,N],[3,R[130],R[132],R[126],N,N],[3,"Rate",E,R[193],N,N],[3,R[131],E,R[126],N,N],[0,R[47],E,R[32],N,N],[3,R[22],R[137],R[194],N,N],[11,"new",R[129],R[195],2,[[[R[62]],["u64"]],["self"]]],[11,"new",R[132],R[196],3,[[[R[62]],["u64"]],["self"]]],[11,"new",R[129],R[197],4,[[[T],["rate"]],["self"]]],[11,"get_ref",E,R[133],4,[[["self"]],[T]]],[11,"get_mut",E,R[134],4,[[["self"]],[T]]],[11,R[36],E,R[135],4,[[],[T]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[24],E,E,1,[[["self"]],[T]]],[11,R[25],E,E,1,[[["self"],[T]]]],[11,"into",E,E,1,[[],[U]]],[11,R[3],E,E,1,[[[U]],[R[2]]]],[11,R[4],E,E,1,[[],[R[2]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[24],E,E,0,[[["self"]],[T]]],[11,R[25],E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,R[3],E,E,0,[[[U]],[R[2]]]],[11,R[4],E,E,0,[[],[R[2]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[3],E,E,4,[[[U]],[R[2]]]],[11,R[4],E,E,4,[[],[R[2]]]],[11,R[5],E,E,4,[[["self"]],[T]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[3],E,E,2,[[[U]],[R[2]]]],[11,R[4],E,E,2,[[],[R[2]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"from",R[136],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[3],E,E,5,[[[U]],[R[2]]]],[11,R[4],E,E,5,[[],[R[2]]]],[11,R[5],E,E,5,[[["self"]],[T]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,R[34],E,E,5,[[],["f"]]],[11,"from",R[132],E,3,[[[T]],[T]]],[11,R[24],E,E,3,[[["self"]],[T]]],[11,R[25],E,E,3,[[["self"],[T]]]],[11,"into",E,E,3,[[],[U]]],[11,R[3],E,E,3,[[[U]],[R[2]]]],[11,R[4],E,E,3,[[],[R[2]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,"from",R[137],E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[3],E,E,6,[[[U]],[R[2]]]],[11,R[4],E,E,6,[[],[R[2]]]],[11,R[5],E,E,6,[[["self"]],[T]]],[11,R[6],E,E,6,[[["self"]],[T]]],[11,R[7],E,E,6,[[["self"]],[R[8]]]],[11,R[34],E,E,6,[[],["f"]]],[11,"drop",R[136],E,5,[[["self"]]]],[11,"clone",R[129],E,0,[[["self"]],[R[160]]]],[11,"clone",E,E,1,[[["self"]],[R[163]]]],[11,"clone",R[132],E,3,[[["self"]],["rate"]]],[11,"fmt",R[136],E,5,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[129],E,0,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[137],E,6,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[129],E,2,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[132],E,3,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[129],E,4,[[["self"],[R[19]]],[R[2]]]],[11,"poll",R[136],E,5,[[["self"]],["poll"]]],[11,"poll",R[137],E,6,[[["self"]],["poll"]]],[11,"layer",R[129],E,0,[[["self"],["s"]]]],[11,"layer",E,E,2,[[["self"],["s"]]]],[11,R[20],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,[[["self"],[R[48]]]]],[11,R[20],E,E,4,[[["self"]],["poll"]]],[11,"call",E,E,4,[[["self"],[R[48]]]]]],"p":[[3,R[127]],[3,R[128]],[3,R[130]],[3,"Rate"],[3,R[131]],[3,R[22]],[3,R[22]]]};
searchIndex["tower_load"]={"doc":"Abstractions and utilties for measuring a service's load.","i":[[3,R[74],R[67],"Wraps a type so that `Load::load` returns a constant value.",N,N],[3,R[75],E,"Attaches a `I`-typed instruments to the result of an…",N,N],[3,R[79],E,"A `Instrument` implementation that drops each instrument…",N,N],[11,"new",E,"Wraps a `T`-typed service with a constant `M`-typed load…",0,[[["m"],[T]],["self"]]],[11,"new",E,"Wraps a future, instrumenting its value if successful.",1,[[["i"],["f"],["h"]],["self"]]],[0,"peak_ewma",E,"A `Load` implementation that PeakEWMA on response latency.",N,N],[3,R[80],R[68],"Wraps an `S`-typed Service with Peak-EWMA load measurement.",N,N],[3,R[76],E,"Wraps a `D`-typed stream of discovery updates with…",N,N],[3,"Cost",E,"Represents the relative cost of communicating with a…",N,N],[3,R[82],E,"Tracks an in-flight request and updates the RTT-estimate…",N,N],[11,"new",E,"Wraps a `D`-typed `Discover` so that services have a…",2,[[[R[62]],["d"],["i"]],["self"]]],[0,"pending_requests",R[67],"A `Load` implementation that uses the count of in-flight…",N,N],[3,R[81],R[69],"Expresses load based on the number of currently-pending…",N,N],[3,R[77],E,"Wraps `inner`'s services with `PendingRequests`.",N,N],[3,"Count",E,"Represents the number of currently-pending requests to a…",N,N],[3,R[82],E,"Tracks an in-flight request by reference count.",N,N],[11,"new",E,"Wraps a `Discover``, wrapping all of its services with…",3,[[["d"],["i"]],["self"]]],[8,R[78],R[67],"Attaches `I`-typed instruments to `V` typed values.",N,N],[16,"Output",E,"The instrumented value type.",4,N],[10,R[70],E,"Attaches an `H`-typed handle to a `V`-typed value.",4,[[["self"],["v"],["h"]]]],[8,"Load",E,"Exposes a load metric.",N,N],[16,"Metric",E,"A comparable load metric. Lesser values are \"preferable\"…",5,N],[10,"load",E,"Obtains a service's load.",5,[[["self"]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[3],E,E,0,[[[U]],[R[2]]]],[11,R[4],E,E,0,[[],[R[2]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[3],E,E,1,[[[U]],[R[2]]]],[11,R[4],E,E,1,[[],[R[2]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[34],E,E,1,[[],["f"]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[24],E,E,6,[[["self"]],[T]]],[11,R[25],E,E,6,[[["self"],[T]]]],[11,"into",E,E,6,[[],[U]]],[11,R[3],E,E,6,[[[U]],[R[2]]]],[11,R[4],E,E,6,[[],[R[2]]]],[11,R[5],E,E,6,[[["self"]],[T]]],[11,R[6],E,E,6,[[["self"]],[T]]],[11,R[7],E,E,6,[[["self"]],[R[8]]]],[11,"from",R[68],E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[3],E,E,7,[[[U]],[R[2]]]],[11,R[4],E,E,7,[[],[R[2]]]],[11,R[5],E,E,7,[[["self"]],[T]]],[11,R[6],E,E,7,[[["self"]],[T]]],[11,R[7],E,E,7,[[["self"]],[R[8]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[3],E,E,2,[[[U]],[R[2]]]],[11,R[4],E,E,2,[[],[R[2]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[24],E,E,8,[[["self"]],[T]]],[11,R[25],E,E,8,[[["self"],[T]]]],[11,"into",E,E,8,[[],[U]]],[11,R[3],E,E,8,[[[U]],[R[2]]]],[11,R[4],E,E,8,[[],[R[2]]]],[11,R[5],E,E,8,[[["self"]],[T]]],[11,R[6],E,E,8,[[["self"]],[T]]],[11,R[7],E,E,8,[[["self"]],[R[8]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[3],E,E,9,[[[U]],[R[2]]]],[11,R[4],E,E,9,[[],[R[2]]]],[11,R[5],E,E,9,[[["self"]],[T]]],[11,R[6],E,E,9,[[["self"]],[T]]],[11,R[7],E,E,9,[[["self"]],[R[8]]]],[11,"from",R[69],E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[3],E,E,10,[[[U]],[R[2]]]],[11,R[4],E,E,10,[[],[R[2]]]],[11,R[5],E,E,10,[[["self"]],[T]]],[11,R[6],E,E,10,[[["self"]],[T]]],[11,R[7],E,E,10,[[["self"]],[R[8]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[3],E,E,3,[[[U]],[R[2]]]],[11,R[4],E,E,3,[[],[R[2]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[24],E,E,11,[[["self"]],[T]]],[11,R[25],E,E,11,[[["self"],[T]]]],[11,"into",E,E,11,[[],[U]]],[11,R[3],E,E,11,[[[U]],[R[2]]]],[11,R[4],E,E,11,[[],[R[2]]]],[11,R[5],E,E,11,[[["self"]],[T]]],[11,R[6],E,E,11,[[["self"]],[T]]],[11,R[7],E,E,11,[[["self"]],[R[8]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[3],E,E,12,[[[U]],[R[2]]]],[11,R[4],E,E,12,[[],[R[2]]]],[11,R[5],E,E,12,[[["self"]],[T]]],[11,R[6],E,E,12,[[["self"]],[T]]],[11,R[7],E,E,12,[[["self"]],[R[8]]]],[11,R[70],R[67],E,6,[[["self"],["v"],["h"]],["v"]]],[11,"load",E,E,0,[[["self"]],["m"]]],[11,"load",R[68],E,7,[[["self"]]]],[11,"load",R[69],E,10,[[["self"]],["count"]]],[11,"cmp",E,E,11,[[["self"],["count"]],[R[71]]]],[11,R[72],R[68],E,8,[[["self"],["cost"]],[[R[71]],[R[46],[R[71]]]]]],[11,"lt",E,E,8,[[["self"],["cost"]],["bool"]]],[11,"le",E,E,8,[[["self"],["cost"]],["bool"]]],[11,"gt",E,E,8,[[["self"],["cost"]],["bool"]]],[11,"ge",E,E,8,[[["self"],["cost"]],["bool"]]],[11,R[72],R[69],E,11,[[["self"],["count"]],[[R[71]],[R[46],[R[71]]]]]],[11,"lt",E,E,11,[[["self"],["count"]],["bool"]]],[11,"le",E,E,11,[[["self"],["count"]],["bool"]]],[11,"gt",E,E,11,[[["self"],["count"]],["bool"]]],[11,"ge",E,E,11,[[["self"],["count"]],["bool"]]],[11,R[89],E,E,11,[[],["count"]]],[11,"drop",R[68],E,9,[[["self"]]]],[11,"clone",R[67],E,6,[[["self"]],["noinstrument"]]],[11,"clone",R[68],E,8,[[["self"]],["cost"]]],[11,"clone",R[69],E,11,[[["self"]],["count"]]],[11,"eq",R[68],E,8,[[["self"],["cost"]],["bool"]]],[11,"ne",E,E,8,[[["self"],["cost"]],["bool"]]],[11,"eq",R[69],E,11,[[["self"],["count"]],["bool"]]],[11,"ne",E,E,11,[[["self"],["count"]],["bool"]]],[11,"fmt",R[67],E,6,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[68],E,8,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[69],E,10,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,11,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,12,[[["self"],[R[19]]],[R[2]]]],[11,"poll",R[67],E,1,[[["self"]],["poll"]]],[11,R[20],E,E,0,[[["self"]],["poll"]]],[11,"call",E,E,0,[[["self"],[R[48]]]]],[11,R[20],R[68],E,7,[[["self"]],["poll"]]],[11,"call",E,E,7,[[["self"],[R[48]]]]],[11,R[20],R[69],E,10,[[["self"]],["poll"]]],[11,"call",E,E,10,[[["self"],[R[48]]]]],[11,"poll",R[67],R[73],0,[[["self"]],[["poll",[R[1]]],[R[1]]]]],[11,"poll",R[68],E,2,[[["self"]],[["poll",[R[1]]],[R[1]]]]],[11,"poll",R[69],R[73],3,[[["self"]],[["poll",[R[1]]],[R[1]]]]]],"p":[[3,R[74]],[3,R[75]],[3,R[76]],[3,R[77]],[8,R[78]],[8,"Load"],[3,R[79]],[3,R[80]],[3,"Cost"],[3,R[82]],[3,R[81]],[3,"Count"],[3,R[82]]]};
searchIndex["tower_load_shed"]={"doc":"Tower middleware for shedding load when inner services…","i":[[3,R[28],R[23],R[198],N,N],[3,R[29],E,R[199],N,N],[0,"error",E,R[31],N,N],[3,R[30],R[26],R[200],N,N],[0,R[47],R[23],R[32],N,N],[3,R[22],R[27],R[201],N,N],[11,"new",R[23],R[202],0,[[],["self"]]],[11,"new",E,R[203],1,[[["s"]],["self"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[24],E,E,0,[[["self"]],[T]]],[11,R[25],E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,R[3],E,E,0,[[[U]],[R[2]]]],[11,R[4],E,E,0,[[],[R[2]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[24],E,E,1,[[["self"]],[T]]],[11,R[25],E,E,1,[[["self"],[T]]]],[11,"into",E,E,1,[[],[U]]],[11,R[3],E,E,1,[[[U]],[R[2]]]],[11,R[4],E,E,1,[[],[R[2]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"from",R[26],E,2,[[[T]],[T]]],[11,R[33],E,E,2,[[["self"]],[R[66]]]],[11,"into",E,E,2,[[],[U]]],[11,R[3],E,E,2,[[[U]],[R[2]]]],[11,R[4],E,E,2,[[],[R[2]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"from",R[27],E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[3],E,E,3,[[[U]],[R[2]]]],[11,R[4],E,E,3,[[],[R[2]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[34],E,E,3,[[],["f"]]],[11,"clone",R[23],E,0,[[["self"]],[R[165]]]],[11,"clone",E,E,1,[[["self"]],["self"]]],[11,"fmt",R[26],E,2,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[27],E,3,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[23],E,0,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[19]]],[R[2]]]],[11,"poll",R[27],E,3,[[["self"]],["poll"]]],[11,R[20],R[23],E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,[[["self"],["req"]]]],[11,"layer",E,E,0,[[["self"],["s"]]]]],"p":[[3,R[28]],[3,R[29]],[3,R[30]],[3,R[22]]]};
searchIndex["tower_reconnect"]={"doc":E,"i":[[3,R[94],R[92],E,N,N],[0,R[47],E,E,N,N],[3,R[22],R[93],E,N,N],[11,"new",R[92],E,0,[[["m"],["target"]],["self"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[3],E,E,0,[[[U]],[R[2]]]],[11,R[4],E,E,0,[[],[R[2]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[20],E,E,0,[[["self"]],[["async"],[R[2],["async"]]]]],[11,R[99],E,E,0,[[["self"],["target"]]]],[11,R[20],E,E,0,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[95],E,E,0,[[["self"],["target"]]]],[11,"from",R[93],E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[3],E,E,1,[[[U]],[R[2]]]],[11,R[4],E,E,1,[[],[R[2]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[34],E,E,1,[[],["f"]]],[11,"fmt",R[92],E,0,[[["self"],[R[19]]],[R[2]]]],[11,"poll",R[93],E,1,[[["self"]],["poll"]]],[11,R[20],R[92],E,0,[[["self"]],["poll"]]],[11,"call",E,E,0,[[["self"],[R[48]]]]]],"p":[[3,R[94]],[3,R[22]]]};
searchIndex["tower_retry"]={"doc":"Tower middleware for retrying \"failed\" requests.","i":[[3,R[87],R[84],R[204],N,N],[3,"Retry",E,R[205],N,N],[0,"budget",E,R[206],N,N],[3,"Budget",R[85],R[207],N,N],[3,R[88],E,R[208],N,N],[11,"new",E,R[209],0,[[[R[62]],["u32"],["f32"]],["self"]]],[11,"deposit",E,R[210],0,[[["self"]]]],[11,"withdraw",E,R[211],0,[[["self"]],[[R[2],[R[83]]],[R[83]]]]],[0,R[47],R[84],R[32],N,N],[3,R[22],R[86],R[212],N,N],[11,"new",R[84],R[213],1,[[["p"]],["self"]]],[8,"Policy",E,R[214],N,N],[16,R[91],E,R[215],2,N],[10,"retry",E,R[216],2,[[["self"],["e"],["req"],["res"],[R[2]]],[R[46]]]],[10,R[90],E,R[217],2,[[["self"],["req"]],[R[46]]]],[11,"new",E,"Retry the inner service depending on this `Policy`.",3,[[["s"],["p"]],["self"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[3],E,E,1,[[[U]],[R[2]]]],[11,R[4],E,E,1,[[],[R[2]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[24],E,E,3,[[["self"]],[T]]],[11,R[25],E,E,3,[[["self"],[T]]]],[11,"into",E,E,3,[[],[U]]],[11,R[3],E,E,3,[[[U]],[R[2]]]],[11,R[4],E,E,3,[[],[R[2]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,"from",R[85],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[3],E,E,0,[[[U]],[R[2]]]],[11,R[4],E,E,0,[[],[R[2]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[3],E,E,4,[[[U]],[R[2]]]],[11,R[4],E,E,4,[[],[R[2]]]],[11,R[5],E,E,4,[[["self"]],[T]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,"from",R[86],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[3],E,E,5,[[[U]],[R[2]]]],[11,R[4],E,E,5,[[],[R[2]]]],[11,R[5],E,E,5,[[["self"]],[T]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,R[34],E,E,5,[[],["f"]]],[11,R[89],R[85],E,0,[[],["budget"]]],[11,"clone",R[84],E,3,[[["self"]],["retry"]]],[11,"fmt",R[85],E,4,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[86],E,5,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[84],E,1,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[19]]],[R[2]]]],[11,"poll",R[86],E,5,[[["self"]],["poll"]]],[11,R[20],R[84],E,3,[[["self"]],["poll"]]],[11,"call",E,E,3,[[["self"],[R[48]]]]],[11,"layer",E,E,1,[[["self"],["s"]]]]],"p":[[3,"Budget"],[3,R[87]],[8,"Policy"],[3,"Retry"],[3,R[88]],[3,R[22]]]};
searchIndex["tower_service"]={"doc":"Definition of the core `Service` trait to Tower","i":[[8,R[0],"tower_service","An asynchronous function from a `Request` to a `Response`.",N,N],[16,R[40],E,R[218],0,N],[16,"Error",E,R[219],0,N],[16,R[91],E,R[220],0,N],[10,R[20],E,R[221],0,[[["self"]],["poll"]]],[10,"call",E,R[222],0,[[["self"],[R[48]]]]]],"p":[[8,R[0]]]};
searchIndex["tower_spawn_ready"]={"doc":"When an underlying service is not ready, drive it to…","i":[[3,R[102],R[96],"Spawns tasks to drive its inner service to readiness.",N,N],[3,R[104],E,"Builds a SpawnReady with the result of an inner Future.",N,N],[3,R[105],E,"Builds SpawnReady instances with the result of an inner…",N,N],[3,R[103],E,"Spawns tasks to drive an inner service to readiness.",N,N],[0,"error",E,R[31],N,N],[3,R[106],R[100],R[114],N,N],[0,R[47],R[96],"Background readiness types",N,N],[3,R[107],R[101],"Drives a service to readiness.",N,N],[8,"BackgroundReadyExecutor",E,R[115],N,N],[11,"new",R[96],"Builds a SpawnReady layer with the default executor.",0,[[],["self"]]],[11,R[97],E,"Builds a SpawnReady layer with the provided executor.",0,[[["e"]],["self"]]],[11,"new",E,R[98],1,[[[T]],["self"]]],[11,R[97],E,R[98],1,[[[T],["e"]],["self"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[24],E,E,0,[[["self"]],[T]]],[11,R[25],E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,R[3],E,E,0,[[[U]],[R[2]]]],[11,R[4],E,E,0,[[],[R[2]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[3],E,E,2,[[[U]],[R[2]]]],[11,R[4],E,E,2,[[],[R[2]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[34],E,E,2,[[],["f"]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[24],E,E,3,[[["self"]],[T]]],[11,R[25],E,E,3,[[["self"],[T]]]],[11,"into",E,E,3,[[],[U]]],[11,R[3],E,E,3,[[[U]],[R[2]]]],[11,R[4],E,E,3,[[],[R[2]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[20],E,E,3,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[95],E,E,3,[[["self"],["target"]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[3],E,E,1,[[[U]],[R[2]]]],[11,R[4],E,E,1,[[],[R[2]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[20],E,E,1,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[99],E,E,1,[[["self"],["target"]]]],[11,R[20],E,E,1,[[["self"]],[[R[2],["async"]],["async"]]]],[11,R[95],E,E,1,[[["self"],["target"]]]],[11,"from",R[100],E,4,[[[T]],[T]]],[11,R[33],E,E,4,[[["self"]],[R[66]]]],[11,"into",E,E,4,[[],[U]]],[11,R[3],E,E,4,[[[U]],[R[2]]]],[11,R[4],E,E,4,[[],[R[2]]]],[11,R[5],E,E,4,[[["self"]],[T]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,"from",R[101],E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[3],E,E,5,[[[U]],[R[2]]]],[11,R[4],E,E,5,[[],[R[2]]]],[11,R[5],E,E,5,[[["self"]],[T]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,R[34],E,E,5,[[],["f"]]],[11,"clone",R[96],E,0,[[["self"]],["self"]]],[11,"clone",E,E,3,[[["self"]],["makespawnready"]]],[11,"fmt",R[100],E,4,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,4,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[96],E,0,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[19]]],[R[2]]]],[11,"source",R[100],E,4,[[["self"]],[[R[46],["error"]],["error"]]]],[11,"poll",R[101],E,5,[[["self"]],["poll"]]],[11,"poll",R[96],E,2,[[["self"]],["poll"]]],[11,R[20],E,E,3,[[["self"]],["poll"]]],[11,"call",E,E,3,[[["self"],["target"]]]],[11,R[20],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,[[["self"],[R[48]]]]],[11,"layer",E,E,0,[[["self"],["s"]]]]],"p":[[3,R[102]],[3,R[103]],[3,R[104]],[3,R[105]],[3,R[106]],[3,R[107]]]};
searchIndex["tower_test"]={"doc":R[13],"i":[[0,"mock",R[16],R[13],N,N],[3,"Mock",R[14],"A mock service",N,N],[3,R[82],E,"Handle to the `Mock`.",N,N],[3,R[21],E,"Send a response in reply to a received request.",N,N],[5,"pair",E,"Create a new `Mock` and `Handle` pair.",N,[[]]],[0,"error",E,R[31],N,N],[3,"Closed",R[17],E,N,N],[0,R[47],R[14],R[32],N,N],[3,R[22],R[18],"Future of the `Mock` response.",N,N],[11,"poll_request",R[14],"Asynchronously gets the next request",0,[[["self"]],[["poll",[R[46],"box"]],[R[46]],["box",["error"]]]]],[11,"next_request",E,"Synchronously gets the next request.",0,[[["self"]],[R[46]]]],[11,"allow",E,"Allow a certain number of requests",0,[[["self"],["u64"]]]],[11,R[15],E,"Make the next poll_ method error with the given error.",0,[[["self"],["box",["error"]],["into",["box"]]]]],[11,"send_response",E,E,1,[[[T]]]],[11,R[15],E,E,1,[[["box",["error"]],["into",["box"]]]]],[14,"assert_request_eq",R[16],"Asserts that the mock handle receives a new request equal…",N,N],[11,"from",R[14],E,2,[[[T]],[T]]],[11,R[24],E,E,2,[[["self"]],[T]]],[11,R[25],E,E,2,[[["self"],[T]]]],[11,"into",E,E,2,[[],[U]]],[11,R[3],E,E,2,[[[U]],[R[2]]]],[11,R[4],E,E,2,[[],[R[2]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[3],E,E,0,[[[U]],[R[2]]]],[11,R[4],E,E,0,[[],[R[2]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[3],E,E,1,[[[U]],[R[2]]]],[11,R[4],E,E,1,[[],[R[2]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"from",R[17],E,3,[[[T]],[T]]],[11,R[33],E,E,3,[[["self"]],[R[66]]]],[11,"into",E,E,3,[[],[U]]],[11,R[3],E,E,3,[[[U]],[R[2]]]],[11,R[4],E,E,3,[[],[R[2]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,"from",R[18],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[3],E,E,4,[[[U]],[R[2]]]],[11,R[4],E,E,4,[[],[R[2]]]],[11,R[5],E,E,4,[[["self"]],[T]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[34],E,E,4,[[],["f"]]],[11,"drop",R[14],E,2,[[["self"]]]],[11,"drop",E,E,0,[[["self"]]]],[11,"clone",E,E,2,[[["self"]],["self"]]],[11,"fmt",R[17],E,3,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[18],E,4,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[14],E,2,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,1,[[["self"],[R[19]]],[R[2]]]],[11,"poll",R[18],E,4,[[["self"]],["poll"]]],[11,R[20],R[14],E,2,[[["self"]],["poll"]]],[11,"call",E,E,2,[[["self"],[T]]]]],"p":[[3,R[82]],[3,R[21]],[3,"Mock"],[3,"Closed"],[3,R[22]]]};
searchIndex["tower_timeout"]={"doc":"Tower middleware that applies a timeout to requests.","i":[[3,R[65],R[61],R[223],N,N],[3,"Timeout",E,R[224],N,N],[0,"error",E,R[31],N,N],[3,"Elapsed",R[63],R[225],N,N],[11,"new",E,R[226],0,[[],["self"]]],[0,R[47],R[61],R[32],N,N],[3,R[22],R[64],R[227],N,N],[11,"new",R[61],R[228],1,[[[R[62]]],["self"]]],[11,"new",E,R[229],2,[[[R[62]],[T]],["self"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[3],E,E,1,[[[U]],[R[2]]]],[11,R[4],E,E,1,[[],[R[2]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[24],E,E,2,[[["self"]],[T]]],[11,R[25],E,E,2,[[["self"],[T]]]],[11,"into",E,E,2,[[],[U]]],[11,R[3],E,E,2,[[[U]],[R[2]]]],[11,R[4],E,E,2,[[],[R[2]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"from",R[63],E,0,[[[T]],[T]]],[11,R[33],E,E,0,[[["self"]],[R[66]]]],[11,"into",E,E,0,[[],[U]]],[11,R[3],E,E,0,[[[U]],[R[2]]]],[11,R[4],E,E,0,[[],[R[2]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"from",R[64],E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[3],E,E,3,[[[U]],[R[2]]]],[11,R[4],E,E,3,[[],[R[2]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[34],E,E,3,[[],["f"]]],[11,"clone",R[61],E,2,[[["self"]],["timeout"]]],[11,"fmt",R[63],E,0,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[64],E,3,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[61],E,1,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[19]]],[R[2]]]],[11,"poll",R[64],E,3,[[["self"]],["poll"]]],[11,"layer",R[61],E,1,[[["self"],["s"]]]],[11,R[20],E,E,2,[[["self"]],["poll"]]],[11,"call",E,E,2,[[["self"],[R[48]]]]]],"p":[[3,"Elapsed"],[3,R[65]],[3,"Timeout"],[3,R[22]]]};
searchIndex["tower_util"]={"doc":"Various utility types and functions that are generally…","i":[[3,R[49],R[38],R[230],N,N],[3,R[50],E,R[231],N,N],[3,"CallAll",E,R[232],N,N],[3,R[51],E,R[233],N,N],[3,"Oneshot",E,R[234],N,N],[3,R[53],E,R[235],N,N],[3,"Ready",E,R[236],N,N],[3,R[55],E,"A `Service` implemented by a closure.",N,N],[4,"Either",E,R[237],N,N],[13,"A",E,E,0,N],[13,"B",E,E,0,N],[5,R[238],E,R[239],N,[[[T]],[R[45]]]],[11,"new",E,E,1,[[["s"]],["self"]]],[11,"new",E,E,2,[[["s"]],["self"]]],[11,"new",E,R[240],3,[[["s"],["svc"]],["callall"]]],[11,R[36],E,R[37],3,[[],["svc"]]],[11,R[241],E,R[242],3,[[],[R[35]]]],[11,"new",E,R[243],4,[[["s"],["svc"]],[R[35]]]],[11,R[36],E,R[37],4,[[],["svc"]]],[0,"layer",E,E,N,N],[3,R[52],R[41],R[244],N,N],[3,"Stack",E,R[245],N,N],[11,"new",E,R[246],5,[[],[R[44]]]],[11,"new",E,R[247],6,[[["inner"],["outer"]],["self"]]],[11,"new",R[38],E,7,[[["s"],["req"]],["self"]]],[11,"new",E,R[248],8,[[[R[46]]],[R[39]]]],[11,"new",E,E,9,[[[T]],["self"]]],[0,"error",E,R[31],N,N],[0,R[39],"tower_util::error",E,N,N],[3,"None",R[42],E,N,N],[0,R[47],R[38],R[32],N,N],[0,R[39],"tower_util::future",E,N,N],[3,R[22],R[43],"Response future returned by `Optional`.",N,N],[8,R[54],R[38],R[249],N,N],[16,R[40],E,R[250],10,N],[16,"Error",E,R[251],10,N],[16,R[0],E,R[252],10,N],[16,R[253],E,R[254],10,N],[16,R[91],E,R[255],10,N],[10,R[20],E,"Returns `Ready` when the factory is able to create more…",10,[[["self"]],["poll"]]],[10,R[95],E,R[256],10,[[["self"],["target"]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[3],E,E,1,[[[U]],[R[2]]]],[11,R[4],E,E,1,[[],[R[2]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[3],E,E,2,[[[U]],[R[2]]]],[11,R[4],E,E,2,[[],[R[2]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[3],E,E,3,[[[U]],[R[2]]]],[11,R[4],E,E,3,[[],[R[2]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[3],E,E,4,[[[U]],[R[2]]]],[11,R[4],E,E,4,[[],[R[2]]]],[11,R[5],E,E,4,[[["self"]],[T]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[3],E,E,7,[[[U]],[R[2]]]],[11,R[4],E,E,7,[[],[R[2]]]],[11,R[5],E,E,7,[[["self"]],[T]]],[11,R[6],E,E,7,[[["self"]],[T]]],[11,R[7],E,E,7,[[["self"]],[R[8]]]],[11,R[34],E,E,7,[[],["f"]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[3],E,E,8,[[[U]],[R[2]]]],[11,R[4],E,E,8,[[],[R[2]]]],[11,R[5],E,E,8,[[["self"]],[T]]],[11,R[6],E,E,8,[[["self"]],[T]]],[11,R[7],E,E,8,[[["self"]],[R[8]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[3],E,E,9,[[[U]],[R[2]]]],[11,R[4],E,E,9,[[],[R[2]]]],[11,R[5],E,E,9,[[["self"]],[T]]],[11,R[6],E,E,9,[[["self"]],[T]]],[11,R[7],E,E,9,[[["self"]],[R[8]]]],[11,R[34],E,E,9,[[],["f"]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[24],E,E,11,[[["self"]],[T]]],[11,R[25],E,E,11,[[["self"],[T]]]],[11,"into",E,E,11,[[],[U]]],[11,R[3],E,E,11,[[[U]],[R[2]]]],[11,R[4],E,E,11,[[],[R[2]]]],[11,R[5],E,E,11,[[["self"]],[T]]],[11,R[6],E,E,11,[[["self"]],[T]]],[11,R[7],E,E,11,[[["self"]],[R[8]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[24],E,E,0,[[["self"]],[T]]],[11,R[25],E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,R[3],E,E,0,[[[U]],[R[2]]]],[11,R[4],E,E,0,[[],[R[2]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[34],E,E,0,[[],["f"]]],[11,"from",R[41],E,5,[[[T]],[T]]],[11,R[24],E,E,5,[[["self"]],[T]]],[11,R[25],E,E,5,[[["self"],[T]]]],[11,"into",E,E,5,[[],[U]]],[11,R[3],E,E,5,[[[U]],[R[2]]]],[11,R[4],E,E,5,[[],[R[2]]]],[11,R[5],E,E,5,[[["self"]],[T]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[24],E,E,6,[[["self"]],[T]]],[11,R[25],E,E,6,[[["self"],[T]]]],[11,"into",E,E,6,[[],[U]]],[11,R[3],E,E,6,[[[U]],[R[2]]]],[11,R[4],E,E,6,[[],[R[2]]]],[11,R[5],E,E,6,[[["self"]],[T]]],[11,R[6],E,E,6,[[["self"]],[T]]],[11,R[7],E,E,6,[[["self"]],[R[8]]]],[11,"from",R[42],E,12,[[[T]],[T]]],[11,R[33],E,E,12,[[["self"]],[R[66]]]],[11,"into",E,E,12,[[],[U]]],[11,R[3],E,E,12,[[[U]],[R[2]]]],[11,R[4],E,E,12,[[],[R[2]]]],[11,R[5],E,E,12,[[["self"]],[T]]],[11,R[6],E,E,12,[[["self"]],[T]]],[11,R[7],E,E,12,[[["self"]],[R[8]]]],[11,"from",R[43],E,13,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,R[3],E,E,13,[[[U]],[R[2]]]],[11,R[4],E,E,13,[[],[R[2]]]],[11,R[5],E,E,13,[[["self"]],[T]]],[11,R[6],E,E,13,[[["self"]],[T]]],[11,R[7],E,E,13,[[["self"]],[R[8]]]],[11,R[34],E,E,13,[[],["f"]]],[11,R[89],R[41],E,5,[[],[R[44]]]],[11,"clone",R[38],E,0,[[["self"]],["either"]]],[11,"clone",R[41],E,5,[[["self"]],[R[44]]]],[11,"clone",E,E,6,[[["self"]],["stack"]]],[11,"clone",R[38],E,11,[[["self"]],[R[45]]]],[11,"fmt",R[42],E,12,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[38],E,1,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,4,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[41],E,5,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,6,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[42],E,12,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",R[38],E,9,[[["self"],[R[19]]],[R[2]]]],[11,"fmt",E,E,11,[[["self"],[R[19]]],[R[2]]]],[11,"poll",E,E,0,[[["self"]],["poll"]]],[11,"poll",E,E,7,[[["self"]],["poll"]]],[11,"poll",R[43],E,13,[[["self"]],["poll"]]],[11,"poll",R[38],E,9,[[["self"]],["poll"]]],[11,"poll",E,E,3,[[["self"]],[["poll",[R[46]]],[R[46]]]]],[11,"poll",E,E,4,[[["self"]],[["poll",[R[46]]],[R[46]]]]],[11,R[20],E,E,1,[[["self"]],["poll"]]],[11,"call",E,E,1,[[["self"],[T]],[[R[47]],["box",[R[47]]]]]],[11,R[20],E,E,2,[[["self"]],["poll"]]],[11,"call",E,E,2,[[["self"],[T]],[[R[47]],["box",[R[47]]]]]],[11,R[20],E,E,0,[[["self"]],["poll"]]],[11,"call",E,E,0,[[["self"],[R[48]]]]],[11,R[20],E,E,8,[[["self"]],["poll"]]],[11,"call",E,E,8,[[["self"],[R[48]]]]],[11,R[20],E,E,11,[[["self"]],["poll"]]],[11,"call",E,E,11,[[["self"],[R[48]]]]],[11,"layer",R[41],E,5,[[["self"],["s"]]]],[11,"layer",E,E,6,[[["self"],["s"]]]]],"p":[[4,"Either"],[3,R[49]],[3,R[50]],[3,"CallAll"],[3,R[51]],[3,R[52]],[3,"Stack"],[3,"Oneshot"],[3,R[53]],[3,"Ready"],[8,R[54]],[3,R[55]],[3,"None"],[3,R[22]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);